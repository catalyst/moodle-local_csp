{"version":3,"file":"notifications.min.js","sources":["../src/notifications.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/.\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/* global localCspViolationsEnforced, localCspViolationsReported */\n\nimport * as Notification from 'core/notification';\nimport * as Str from 'core/str';\nimport Templates from 'core/templates';\n\n\nexport const init = (msEventTimeout) => {\n    const stringsRequestsEnforced = [\n        {key: 'notificationenforcedheader', component: 'local_csp'},\n        {key: 'notificationenforcedstart', component: 'local_csp'},\n        {key: 'notificationenforcedsources', component: 'local_csp'},\n    ];\n    const stringsRequestsReported = [\n        {key: 'notificationreportedheader', component: 'local_csp'},\n        {key: 'notificationreportedstart', component: 'local_csp'},\n        {key: 'notificationreportedsources', component: 'local_csp'},\n    ];\n\n    /**\n     * Displays the events from either the `localCspViolationsEnforced` or the `localCspViolationsReported` array\n     * in the form of a notification, clearing that array in the process.\n     * @param {String} disposition\n     */\n    async function displayNotification(disposition) {\n        let strings, events, type;\n        if (disposition === 'enforce') {\n            strings = await Str.get_strings(stringsRequestsEnforced);\n            events = [...localCspViolationsEnforced];\n            localCspViolationsEnforced.length = 0;\n            type = 'error';\n        } else if (disposition === 'report') {\n            strings = await Str.get_strings(stringsRequestsReported);\n            events = [...localCspViolationsReported];\n            localCspViolationsReported.length = 0;\n            type = 'warning';\n        } else {\n            throw \"Invalid disposition! Must be either 'enforce' or 'report'.\";\n        }\n        let message = await Templates.render(\n            'local_csp/notification',\n            {\n                header: strings[0],\n                start: strings[1],\n                sourcesText: strings[2],\n                events: events\n            }\n        );\n        await Notification.addNotification({message: message, type: type});\n    }\n\n    /**\n     * Calls `displayNotification` to resolve, if the `localCspViolationsEnforced` array is not empty.\n     * Then calls `displayNotification` to resolve, if the `localCspViolationsReported` array is not empty.\n     */\n    function displayIfOccurred() {\n        if (localCspViolationsEnforced.length > 0) {\n            displayNotification('enforce').then(null);\n        }\n        if (localCspViolationsReported.length > 0) {\n            displayNotification('report').then(null);\n        }\n    }\n\n    /**\n     * Waits for a bit before calling `displayIfOccurred`.\n     * Also attaches another listener to the violation event that calls `displayIfOccurred` after a bit of waiting,\n     * unless the event occurs again in the meantime.\n     */\n    function startDisplaying() {\n        let violationEventTimeout = setTimeout(displayIfOccurred, msEventTimeout);\n        document.addEventListener(\"securitypolicyviolation\", () => {\n            // There is no need to handle the event object itself here because the early event listener will push it\n            // to one of the global arrays. We just need to clear and re-start the timer to display events that were\n            // newly collected.\n            clearTimeout(violationEventTimeout);\n            violationEventTimeout = setTimeout(displayIfOccurred, msEventTimeout);\n        });\n    }\n\n    startDisplaying();\n};\n"],"names":["msEventTimeout","stringsRequestsEnforced","key","component","stringsRequestsReported","displayNotification","disposition","strings","events","type","Str","get_strings","localCspViolationsEnforced","length","localCspViolationsReported","message","Templates","render","header","start","sourcesText","Notification","addNotification","displayIfOccurred","then","violationEventTimeout","setTimeout","document","addEventListener","clearTimeout","startDisplaying"],"mappings":"yzCAsBqBA,uBACXC,wBAA0B,CAC5B,CAACC,IAAK,6BAA8BC,UAAW,aAC/C,CAACD,IAAK,4BAA6BC,UAAW,aAC9C,CAACD,IAAK,8BAA+BC,UAAW,cAE9CC,wBAA0B,CAC5B,CAACF,IAAK,6BAA8BC,UAAW,aAC/C,CAACD,IAAK,4BAA6BC,UAAW,aAC9C,CAACD,IAAK,8BAA+BC,UAAW,6BAQrCE,oBAAoBC,iBAC3BC,QAASC,OAAQC,QACD,YAAhBH,YACAC,cAAgBG,IAAIC,YAAYV,yBAChCO,OAAS,IAAII,4BACbA,2BAA2BC,OAAS,EACpCJ,KAAO,YACJ,CAAA,GAAoB,WAAhBH,iBAMD,6DALNC,cAAgBG,IAAIC,YAAYP,yBAChCI,OAAS,IAAIM,4BACbA,2BAA2BD,OAAS,EACpCJ,KAAO,cAIPM,cAAgBC,mBAAUC,OAC1B,yBACA,CACIC,OAAQX,QAAQ,GAChBY,MAAOZ,QAAQ,GACfa,YAAab,QAAQ,GACrBC,OAAQA,eAGVa,aAAaC,gBAAgB,CAACP,QAASA,QAASN,KAAMA,gBAOvDc,oBACDX,2BAA2BC,OAAS,GACpCR,oBAAoB,WAAWmB,KAAK,MAEpCV,2BAA2BD,OAAS,GACpCR,oBAAoB,UAAUmB,KAAK,sBAUnCC,sBAAwBC,WAAWH,kBAAmBvB,gBAC1D2B,SAASC,iBAAiB,2BAA2B,KAIjDC,aAAaJ,uBACbA,sBAAwBC,WAAWH,kBAAmBvB,mBAI9D8B"}