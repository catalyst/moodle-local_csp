{"version":3,"file":"notifications.min.js","sources":["../src/notifications.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/.\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/* global localCspViolations */\n\nimport * as Notification from 'core/notification';\nimport Templates from 'core/templates';\n\n\nexport const init = (enforcedOnly) => {\n    const msEventTimeout = 1000;\n    let displayedAlready = false;\n\n    /**\n     * Takes an array of CSP violation events and displays them in the form of a warning notification.\n     * @param {Array} events\n     */\n    async function displayNotification(events) {\n        let enforcedEvents = [];\n        let reportedEvents = [];\n        events.forEach((event) => {\n            if (event.disposition === 'enforce') {\n                enforcedEvents.push(event);\n            } else if (enforcedOnly === 0 && event.disposition === 'report') {\n                reportedEvents.push(event);\n            }\n        });\n        events.length = 0;\n        let message = await Templates.render(\n            'local_csp/notification',\n            {firstDisplay: !displayedAlready, enforcedEvents: enforcedEvents, reportedEvents: reportedEvents}\n        );\n        displayedAlready = true;\n        await Notification.addNotification({message: message, type: 'warning'});\n    }\n\n    /**\n     * Calls `displayCspViolationNotification` to resolve if the `localCspViolations` array is not empty,\n     * then resets (i.e. empties) it.\n     */\n    function displayIfOccurred() {\n        if (localCspViolations.length > 0) {\n            let events = [...localCspViolations];\n            localCspViolations.length = 0;\n            displayNotification(events).then(null);\n        }\n    }\n\n    /**\n     * Waits for a bit before calling `displayIfOccurred`.\n     * Also attaches another listener to the violation event that calls `displayIfOccurred` after a bit of waiting,\n     * unless the event occurs again in the meantime.\n     */\n    function startDisplaying() {\n        let violationEventTimeout = setTimeout(displayIfOccurred, msEventTimeout);\n        document.addEventListener(\"securitypolicyviolation\", () => {\n            // There is no need to handle the event object itself here because the early event listener will push it\n            // to the global `localCspViolations` array. We just need to clear re-start the timer to display events\n            // that were newly collected.\n            clearTimeout(violationEventTimeout);\n            violationEventTimeout = setTimeout(displayIfOccurred, msEventTimeout);\n        });\n    }\n\n    startDisplaying();\n};\n"],"names":["enforcedOnly","violationEventTimeout","displayedAlready","events","enforcedEvents","reportedEvents","forEach","event","disposition","push","length","Templates","render","firstDisplay","message","Notification","addNotification","type","displayIfOccurred","localCspViolations","displayNotification","then","setTimeout","document","addEventListener","clearTimeout"],"mappings":"26FAqBoB,SAACA,kBA6CTC,sBA3CJC,kBAAmB,yGAMvB,iBAAmCC,8JAC3BC,eAAiB,GACjBC,eAAiB,GACrBF,OAAOG,SAAQ,SAACC,OACc,YAAtBA,MAAMC,YACNJ,eAAeK,KAAKF,OACI,IAAjBP,cAA4C,WAAtBO,MAAMC,aACnCH,eAAeI,KAAKF,UAG5BJ,OAAOO,OAAS,kBACIC,mBAAUC,OAC1B,yBACA,CAACC,cAAeX,iBAAkBE,eAAgBA,eAAgBC,eAAgBA,+BAFlFS,sBAIJZ,kBAAmB,mBACba,aAAaC,gBAAgB,CAACF,QAASA,QAASG,KAAM,qGAOvDC,uBACDC,mBAAmBT,OAAS,EAAG,KAC3BP,0BAAagB,oBACjBA,mBAAmBT,OAAS,iEAC5BU,CAAoBjB,QAAQkB,KAAK,OAUjCpB,sBAAwBqB,WAAWJ,kBA5CpB,KA6CnBK,SAASC,iBAAiB,2BAA2B,WAIjDC,aAAaxB,uBACbA,sBAAwBqB,WAAWJ,kBAlDpB"}