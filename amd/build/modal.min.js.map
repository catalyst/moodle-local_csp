{"version":3,"sources":["../src/modal.js"],"names":["init","enforcedOnly","getModal","Object","isFrozen","localCspViolationEvents","window","setTimeout","enforcedEvents","reportedEvents","forEach","e","disposition","push","length","ModalFactory","create","type","types","ALERT","title","Str","get_string","body","Templates","render","then","modal","show"],"mappings":"wdACA,OACA,OACA,O,gmBACoB,QAAPA,CAAAA,IAAO,CAACC,CAAD,CAAkB,CAMlC,QAASC,CAAAA,CAAT,EAAoB,CAChB,GAAI,CAACC,MAAM,CAACC,QAAP,CAAgBC,uBAAhB,CAAL,CAA+C,CAC3CC,MAAM,CAACC,UAAP,CAAkBL,CAAlB,CAA4B,GAA5B,CACH,CAFD,IAEO,IACCM,CAAAA,CAAc,CAAG,EADlB,CAECC,CAAc,CAAG,EAFlB,CAGHJ,uBAAuB,CAACK,OAAxB,CAAgC,SAACC,CAAD,CAAO,CACpC,GAAsB,SAAlB,GAAAA,CAAC,CAACC,WAAN,CAAiC,CAC7BJ,CAAc,CAACK,IAAf,CAAoBF,CAApB,CACH,CAFD,IAEO,IAAI,CAACV,CAAD,EAAmC,QAAlB,GAAAU,CAAC,CAACC,WAAvB,CAAiD,CACpDH,CAAc,CAACI,IAAf,CAAoBF,CAApB,CACH,CACH,CAND,EAOA,GAAoD,CAAhD,CAAAH,CAAc,CAACM,MAAf,CAAwBL,CAAc,CAACK,MAA3C,CAAuD,CACnDC,UAAaC,MAAb,CAAoB,CAChBC,IAAI,CAAEF,UAAaG,KAAb,CAAmBC,KADT,CAEhBC,KAAK,CAAEC,CAAG,CAACC,UAAJ,CAAe,aAAf,CAA8B,WAA9B,CAFS,CAGhBC,IAAI,CAAEC,UAAUC,MAAV,CACF,sBADE,CAEF,CAACjB,cAAc,CAAEA,CAAjB,CAAiCC,cAAc,CAAEA,CAAjD,CAFE,CAHU,CAApB,EAQCiB,IARD,CAQM,SAASC,CAAT,CAAgB,CAClBA,CAAK,CAACC,IAAN,EACH,CAVD,CAWH,CACJ,CACJ,CACD1B,CAAQ,EACX,C","sourcesContent":["/* global localCspViolationEvents:readonly */\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport * as Str from 'core/str';\nexport const init = (enforcedOnly) => {\n    /**\n     * Once recording CSP violations has stopped, this function will set up and display a modal with the summary.\n     * Since this is not implemented as a callback function, we have no choice but to repeatedly check, if the event\n     * array has been frozen, before creating the modal.\n     */\n    function getModal() {\n        if (!Object.isFrozen(localCspViolationEvents)) {\n            window.setTimeout(getModal, 500);\n        } else {\n            let enforcedEvents = [];\n            let reportedEvents = [];\n            localCspViolationEvents.forEach((e) => {\n               if (e.disposition === 'enforce') {\n                   enforcedEvents.push(e);\n               } else if (!enforcedOnly && e.disposition === 'report') {\n                   reportedEvents.push(e);\n               }\n            });\n            if (enforcedEvents.length + reportedEvents.length > 0) {\n                ModalFactory.create({\n                    type: ModalFactory.types.ALERT,\n                    title: Str.get_string('modalheader', 'local_csp'),\n                    body: Templates.render(\n                        'local_csp/modal_body',\n                        {enforcedEvents: enforcedEvents, reportedEvents: reportedEvents}\n                    ),\n                })\n                .then(function(modal) {\n                    modal.show();\n                });\n            }\n        }\n    }\n    getModal();\n};\n"],"file":"modal.min.js"}